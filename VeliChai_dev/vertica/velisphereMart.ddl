CREATE USER vertica IDENTIFIED BY '1Suplies!';
GRANT USAGE ON SCHEMA PUBLIC TO vertica;
GRANT ALL ON DATABASE VelisphereMart TO vertica;
GRANT USAGE ON SCHEMA vlogger TO vertica;

DROP TABLE vlogger.endpointpropertylog CASCADE;
CREATE TABLE vlogger.endpointpropertylog (
   ENTRYID VARCHAR(36) PRIMARY KEY NOT NULL,
   ENDPOINTID VARCHAR (36) NOT NULL,
   PROPERTYID VARCHAR (36) NOT NULL,
   PROPERTYENTRY VARCHAR (1024),
   TIME_STAMP TIMESTAMP
   );




DROP TABLE vlogger.actionexecutedlog CASCADE;
CREATE TABLE vlogger.actionexecutedlog (
   ENTRYID VARCHAR(36) PRIMARY KEY NOT NULL,
   ACTIONID VARCHAR (36) NOT NULL,
   SENSORID VARCHAR (36),
   ACTORID VARCHAR (36) NOT NULL,
   PAYLOAD VARCHAR (1024),
   PROPERTYID VARCHAR (36) NOT NULL,
   TIME_STAMP TIMESTAMP
   );


DROP TABLE vlogger.checkexecutedlog CASCADE;
CREATE TABLE vlogger.checkexecutedlog (
   ENTRYID VARCHAR(36) PRIMARY KEY NOT NULL,
   CHECKID VARCHAR (36) NOT NULL,
   CHECKVALUE VARCHAR (1024),
   HIT BOOLEAN,
   TIME_STAMP TIMESTAMP
   );

DROP TABLE vlogger.multicheckexecutedlog CASCADE;
CREATE TABLE vlogger.multicheckexecutedlog (
   ENTRYID VARCHAR(36) PRIMARY KEY NOT NULL,
   MULTICHECKID VARCHAR (36) NOT NULL,
   CHECKVALUE VARCHAR (1024),
   HIT BOOLEAN,
   TIME_STAMP TIMESTAMP
   ); 

DROP TABLE vlogger.checkpathexecutedlog CASCADE;
CREATE TABLE vlogger.checkpathexecutedlog (
   ENTRYID VARCHAR(36) PRIMARY KEY NOT NULL,
   CHECKPATHID VARCHAR (36) NOT NULL,
   TIME_STAMP TIMESTAMP
   );

--CREATE TABLE LOGQUEUE (
--
--   EXCHANGENAME VARCHAR(255),
--   MESSAGE VARCHAR(32768),
--   QUEUENAME VARCHAR(255) NOT NULL,
--   ROUTINGKEY VARCHAR(255),
--   IDENTIFIER VARCHAR(36) NOT NULL,
--   PRIMARY KEY (IDENTIFIER, QUEUENAME)
--);

-- PARTITION TABLE LOGQUEUE ON COLUMN QUEUENAME;



DROP TABLE vlogger.USER CASCADE;
CREATE TABLE vlogger.USER (

   USERID VARCHAR(36) NOT NULL,
   USERNAME VARCHAR(255) NOT NULL,
   USEREMAIL VARCHAR(255) NOT NULL,
   USERPWHASH VARCHAR(255),
   PLANID VARCHAR(36),
   PRIMARY KEY (USERID)
);



DROP TABLE vlogger.ENDPOINT_USER_LINK CASCADE;
CREATE TABLE vlogger.ENDPOINT_USER_LINK (

   LINKID VARCHAR(36) NOT NULL,
   ENDPOINTID VARCHAR(36) NOT NULL,
   USERID VARCHAR(36) NOT NULL,
   PRIMARY KEY (LINKID)
);

DROP TABLE vlogger.ENDPOINT__LINK CASCADE;
CREATE TABLE vlogger.ENDPOINT_SPHERE_LINK (

   LINKID VARCHAR(36) NOT NULL,
   ENDPOINTID VARCHAR(36) NOT NULL,
   SPHEREID VARCHAR(36) NOT NULL,
   PRIMARY KEY (LINKID)
);

DROP TABLE vlogger.SPHERE_USER_LINK CASCADE;
CREATE TABLE vlogger.SPHERE_USER_LINK (

   LINKID VARCHAR(36) NOT NULL,
   SPHEREID VARCHAR(36) NOT NULL,
   USERID VARCHAR(36) NOT NULL,
   PRIMARY KEY (LINKID, SPHEREID)
);

DROP TABLE vlogger.SPHERE CASCADE;
CREATE TABLE vlogger.SPHERE (

   SPHEREID VARCHAR(36) NOT NULL,
   SPHERENAME VARCHAR(255) NOT NULL,
   PUBLIC TINYINT,
   PRIMARY KEY (SPHEREID)
);

DROP TABLE vlogger.ENDPOINTCLASS CASCADE;
CREATE TABLE vlogger.ENDPOINTCLASS (

   ENDPOINTCLASSID VARCHAR(36) NOT NULL,
   ENDPOINTCLASSNAME VARCHAR(255) NOT NULL,
   PRIMARY KEY (ENDPOINTCLASSID)
);

DROP TABLE vlogger.ENDPOINT CASCADE;
CREATE TABLE vlogger.ENDPOINT (

   ENDPOINTID VARCHAR(36) NOT NULL,
   ENDPOINTNAME VARCHAR(255) NOT NULL,
   ENDPOINTCLASSID VARCHAR(36) NOT NULL,
   PRIMARY KEY (ENDPOINTID)
);

DROP TABLE vlogger.PROPERTY CASCADE;
CREATE TABLE vlogger.PROPERTY (

   PROPERTYID VARCHAR(36) NOT NULL,
   PROPERTYNAME VARCHAR(255),
   PROPERTYCLASSID VARCHAR(36) NOT NULL,
   ENDPOINTCLASSID VARCHAR(36) NOT NULL,
   ACT TINYINT,
   SENSE TINYINT,
   STATUS TINYINT,
   CONFIGURABLE TINYINT,
   PRIMARY KEY (PROPERTYID)
);

DROP TABLE vlogger.PROPERTYCLASS CASCADE;
CREATE TABLE vlogger.PROPERTYCLASS (

   PROPERTYCLASSID VARCHAR(36) NOT NULL,
   PROPERTYCLASSNAME VARCHAR(255),
   PROPERTYCLASSDATATYPE VARCHAR(32) NOT NULL,
   PROPERTYCLASSUNIT VARCHAR(32),
   PRIMARY KEY (PROPERTYCLASSID)
);


DROP TABLE vlogger.CHECKPATH CASCADE;
CREATE TABLE vlogger.CHECKPATH (

   CHECKPATHID VARCHAR(36) NOT NULL,
   CHECKPATHNAME VARCHAR(255),
   UIOBJECT VARCHAR(32768),
   OWNERID VARCHAR(36),
   PRIMARY KEY (CHECKPATHID)
);

DROP TABLE vlogger.ITEMCOST CASCADE;
CREATE TABLE vlogger.ITEMCOST (

   ITEMID VARCHAR(36) NOT NULL,
   PLANID VARCHAR(36),
   DESCRIPTION VARCHAR(128),
   COST FLOAT,
   PRIMARY KEY (ITEMID, PLANID)
);
DROP TABLE vlogger.PLAN CASCADE;
CREATE TABLE vlogger.PLAN (

   PLANID VARCHAR(36) NOT NULL,
   DESCRIPTION VARCHAR(128),
   PRIMARY KEY (PLANID)
);

DROP TABLE vlogger.ACTION CASCADE;
CREATE TABLE vlogger.ACTION (

   ACTIONID VARCHAR(36) NOT NULL,
   ACTIONNAME VARCHAR(255) NOT NULL,
   TARGETENDPOINTID VARCHAR(36),
   TGTEPIDFROMINBOUNDPROP VARCHAR(36),
   EXPIRED TINYINT,
   CHECKID VARCHAR(36),
   MULTICHECKID VARCHAR(36),
   CHECKPATHID VARCHAR(36) NOT NULL,
   PRIMARY KEY (ACTIONID)
);

DROP TABLE vlogger.FILEUPLOAD CASCADE;
CREATE TABLE vlogger.FILEUPLOAD (

   FILEUPLOADID VARCHAR(36) NOT NULL,
   NAME VARCHAR(255) NOT NULL,
   ORIG_NAME VARCHAR(255) NOT NULL,
   FILETYPE VARCHAR(10) NOT NULL,
   ENDPOINTID VARCHAR(255) NOT NULL,
   TIME_STAMP TIMESTAMP,
   PRIMARY KEY (FILEUPLOADID, ENDPOINTID)
);


GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA vlogger TO vertica;
GRANT ALL PRIVILEGES ON TABLE vlogger.SPHERE TO vertica;


-- Create Views
/*
CREATE VIEW TotalMessagesPerEndpoint AS
   SELECT COUNT(entryid), endpointid 
   FROM vlogger.endpointpropertylog
   GROUP BY endpointid
   ORDER BY endpointid ASC;
 */
   